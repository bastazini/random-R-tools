rm(list=ls())

#  Packages
if (!require(scholar)) {
  install.packages("scholar")
}
if (!require(dplyr)) {
  install.packages("dplyr")
}
if (!require(ggplot2)) {
  install.packages("ggplot2")
}
if (!require(gridExtra)) {
  install.packages("gridExtra")
}


library(scholar)
library(dplyr)
library(ggplot2)
library(gridExtra)

# Getting Researcher Data
get_researcher_data <- function(scholar_id) {
  tryCatch({
    profile <- get_profile(scholar_id)
    pubs <- get_publications(scholar_id)
    
    if (is.null(profile) || is.null(pubs) || nrow(pubs) == 0) {
      stop("No data found for this Google Scholar ID.")
    }
    
    # Total number of journal articles
    total_papers <- nrow(pubs)
    
    # Total number of citations
    total_citations <- sum(pubs$cites, na.rm = TRUE)
    
    # H-index
    h_index <- profile$h_index
    
    # Coauthor counting
    total_coauthors <- sum(sapply(pubs$author, function(authors) {
      length(strsplit(authors, ",")[[1]])
    })) - total_papers  # Subtract total journal articles to exclude self
    
    # First author papers
    first_author_papers <- sum(sapply(pubs$author, function(authors) {
      authors_list <- strsplit(authors, ",")[[1]]
      first_author <- trimws(authors_list[1])
      grepl(profile$name, first_author, ignore.case = TRUE)
    }))
    
    # Last author papers
    senior_author_papers <- sum(sapply(pubs$author, function(authors) {
      authors_list <- strsplit(authors, ",")[[1]]
      last_author <- trimws(authors_list[length(authors_list)])
      grepl(profile$name, last_author, ignore.case = TRUE)
    }))
    
    # Research diversity index (i.e., number of distinct journals)
    research_diversity <- length(unique(pubs$journal))
    
    # Create a list with the results
    result <- list(
      Scholar_ID = scholar_id,
      Total_Papers = total_papers,
      Total_Citations = total_citations,
      H_Index = h_index,
      Total_Coauthors = total_coauthors,
      First_Author_Papers = first_author_papers,
      Senior_Author_Papers = senior_author_papers,
      Research_Diversity = research_diversity
    )
    
    return(result)
  }, error = function(e) {
    message(paste("Error retrieving data for Google Scholar ID:", scholar_id))
    message(e)
    return(NULL)
  })
}

# Calculate Metrics for Multiple Profiles
calculate_metrics_for_profiles <- function(scholar_ids) {
  metrics_list <- lapply(scholar_ids, get_researcher_data)
  metrics_list <- metrics_list[!sapply(metrics_list, is.null)]  # Removing NULL entries
  metrics_df <- do.call(rbind, lapply(metrics_list, as.data.frame))
  return(metrics_df)
}

# Plot empirical Density Distributions 
plot_density_and_percentiles <- function(metrics_df, your_metrics, metric_name) {
  p <- ggplot(metrics_df, aes_string(x = metric_name)) +
    geom_density(fill = "blue", alpha = 0.5) +
    geom_vline(aes(xintercept = your_metrics[[metric_name]]), color = "red", linetype = "dashed", size = 1) +
    labs(title = paste("Density Distribution of", metric_name),
         x = metric_name, y = "Density") +
    theme_minimal()
  return(p)
}

# Calculate Percentile
calculate_percentile <- function(metrics_df, your_metrics, metric_name) {
  metric_values <- metrics_df[[metric_name]]
  your_value <- your_metrics[[metric_name]]
  percentile <- sum(metric_values <= your_value) / length(metric_values) * 100
  return(percentile)
}

# Scholar IDs
scholar_ids <- c("")

my_scholar_id <- ""

# Calculate metrics for all profiles
metrics_df <- calculate_metrics_for_profiles(scholar_ids)

# Retrieve your own metrics
my_metrics <- get_researcher_data(my_scholar_id);my_metrics

# Plot density distributions and calculate percentiles for each metric
metrics <- c("Total_Papers", "Total_Citations", "H_Index", "Total_Coauthors", "First_Author_Papers", "Senior_Author_Papers", "Research_Diversity")
plots <- list()

for (metric in metrics) {
  plot <- plot_density_and_percentiles(metrics_df, my_metrics, metric)
  plots[[metric]] <- plot
  percentile <- calculate_percentile(metrics_df, my_metrics, metric)
  print(paste("Your percentile for", metric, ":", percentile))
}

# Arrange plots in a panel
grid.arrange(grobs = plots, ncol = 2)
